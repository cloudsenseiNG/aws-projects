# ECSdeployment:
#     runs-on: ubuntu-latest
#     needs: terraform-apply
#     defaults:
#       run:
#         working-directory: ./backend    

#     steps:
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1
#           mask-password: 'true'

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Checkout Step
#         id: checkout-step
#         uses: actions/checkout@v4      

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ecr-repo
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"          

#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ./backend/task-definition.json
#           container-name: mern-backend
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ecs-service
#           cluster: ECSCluster
#           wait-for-service-stability: true